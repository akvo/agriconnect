"""Add administrative tables for hierarchical location management

Revision ID: ed5e11c3b7f7
Revises: 210c4ffd9146
Create Date: 2025-09-25 17:57:56.359808

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "ed5e11c3b7f7"
down_revision: Union[str, None] = "210c4ffd9146"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create administrative_levels table
    op.create_table(
        "administrative_levels",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )

    # Create administrative table
    op.create_table(
        "administrative",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("code", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("level_id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("path", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["level_id"],
            ["administrative_levels.id"],
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["administrative.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_administrative_code"),
        "administrative",
        ["code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_administrative_id"), "administrative", ["id"], unique=False
    )

    # Create user_administrative table
    op.create_table(
        "user_administrative",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("administrative_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["administrative_id"],
            ["administrative.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_administrative_id"),
        "user_administrative",
        ["id"],
        unique=False,
    )

    # Create customer_administrative table
    op.create_table(
        "customer_administrative",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("customer_id", sa.Integer(), nullable=False),
        sa.Column("administrative_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["administrative_id"],
            ["administrative.id"],
        ),
        sa.ForeignKeyConstraint(
            ["customer_id"],
            ["customers.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_customer_administrative_id"),
        "customer_administrative",
        ["id"],
        unique=False,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop tables in reverse order to handle foreign key constraints
    op.drop_index(
        op.f("ix_customer_administrative_id"),
        table_name="customer_administrative",
    )
    op.drop_table("customer_administrative")

    op.drop_index(
        op.f("ix_user_administrative_id"), table_name="user_administrative"
    )
    op.drop_table("user_administrative")

    op.drop_index(op.f("ix_administrative_id"), table_name="administrative")
    op.drop_index(op.f("ix_administrative_code"), table_name="administrative")
    op.drop_table("administrative")

    op.drop_table("administrative_levels")

    # ### end Alembic commands ###
