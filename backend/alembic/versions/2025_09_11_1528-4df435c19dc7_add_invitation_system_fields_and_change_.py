"""Add invitation system fields and change is_active to boolean

Revision ID: 4df435c19dc7
Revises: 657fcbb60359
Create Date: 2025-09-11 15:28:26.351178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4df435c19dc7'
down_revision: Union[str, None] = '657fcbb60359'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add new invitation-related columns
    op.add_column('users', sa.Column('invitation_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('invitation_sent_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('invitation_expires_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('password_set_at', sa.DateTime(timezone=True), nullable=True))
    
    # Create unique constraint on invitation_token
    op.create_unique_constraint('uq_users_invitation_token', 'users', ['invitation_token'])
    
    # Change is_active from string to boolean
    # First, add a new boolean column with a temporary name
    op.add_column('users', sa.Column('is_active_new', sa.Boolean(), nullable=True))
    
    # Update the new column based on the old string values
    op.execute("UPDATE users SET is_active_new = CASE WHEN is_active = 'true' THEN true ELSE false END")
    
    # Make hashed_password nullable for invited users who haven't set password yet
    op.alter_column('users', 'hashed_password', nullable=True)
    
    # Drop the old is_active column and rename the new one
    op.drop_column('users', 'is_active')
    op.alter_column('users', 'is_active_new', new_column_name='is_active', nullable=False, server_default='false')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Revert is_active from boolean to string
    op.add_column('users', sa.Column('is_active_old', sa.String(), nullable=True))
    op.execute("UPDATE users SET is_active_old = CASE WHEN is_active THEN 'true' ELSE 'false' END")
    op.drop_column('users', 'is_active')
    op.alter_column('users', 'is_active_old', new_column_name='is_active', server_default='true')
    
    # Make hashed_password non-nullable again
    op.alter_column('users', 'hashed_password', nullable=False)
    
    # Drop invitation-related columns
    op.drop_constraint('uq_users_invitation_token', 'users', type_='unique')
    op.drop_column('users', 'password_set_at')
    op.drop_column('users', 'invitation_expires_at')
    op.drop_column('users', 'invitation_sent_at')
    op.drop_column('users', 'invitation_token')
    # ### end Alembic commands ###
